<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://smilessneko.github.io/bkJin/</id>
    <title>Jin的笔记博客</title>
    <updated>2021-05-12T13:38:32.384Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://smilessneko.github.io/bkJin/"/>
    <link rel="self" href="https://smilessneko.github.io/bkJin/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://smilessneko.github.io/bkJin/images/avatar.png</logo>
    <icon>https://smilessneko.github.io/bkJin/favicon.ico</icon>
    <rights>All rights reserved 2021, Jin的笔记博客</rights>
    <entry>
        <title type="html"><![CDATA[04.Vue-cli]]></title>
        <id>https://smilessneko.github.io/bkJin/post/04vue-cli/</id>
        <link href="https://smilessneko.github.io/bkJin/post/04vue-cli/">
        </link>
        <updated>2021-05-12T13:28:53.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5Cqq354%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210414011053093.png" alt="image-20210414011053093" loading="lazy"></figure>
<p>安装命令:	(全局安装)</p>
<pre><code>npm install -g @vue/cli

//检查版本
vue -V

//创建项目
vue create 项目名
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[03.Vue的组件思想]]></title>
        <id>https://smilessneko.github.io/bkJin/post/03vue-de-zu-jian-si-xiang/</id>
        <link href="https://smilessneko.github.io/bkJin/post/03vue-de-zu-jian-si-xiang/">
        </link>
        <updated>2021-05-12T13:28:34.000Z</updated>
        <content type="html"><![CDATA[<h1 id="vue3-组件">Vue3 组件</h1>
<p>组件（Component）是 Vue.js 最强大的功能之一。</p>
<p>组件可以扩展 HTML 元素，封装可重用的代码。</p>
<p>组件系统让我们可以用独立可复用的小组件来构建大型应用，几乎任意类型的应用的界面都可以抽象为一个组件树：</p>
<figure data-type="image" tabindex="1"><img src="https://www.runoob.com/wp-content/uploads/2017/01/components.png" alt="img" loading="lazy"></figure>
<h1 id="注册组件的基本步骤">注册组件的基本步骤</h1>
<ol>
<li>
<p>创建组件构造器</p>
</li>
<li>
<p>注册组件</p>
</li>
<li>
<p>使用组件</p>
<figure data-type="image" tabindex="2"><img src="C:%5CUsers%5Cqq354%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210327142928636.png" alt="image-20210327142928636" loading="lazy"></figure>
</li>
</ol>
<pre><code>在ES6中,继承写法和JAVA一样:
class Person {...}
从 Person 继承:
class Student extends Person {...}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[02.Vue的options选项]]></title>
        <id>https://smilessneko.github.io/bkJin/post/02vue-de-options-xuan-xiang/</id>
        <link href="https://smilessneko.github.io/bkJin/post/02vue-de-options-xuan-xiang/">
        </link>
        <updated>2021-05-12T13:28:15.000Z</updated>
        <content type="html"><![CDATA[<p><strong><img src="C:%5CUsers%5Cqq354%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210322150355322.png" alt="image-20210322150355322" loading="lazy"></strong></p>
<ul>
<li>
<p>开发过程中，什么时候叫函数，什么时候交方法</p>
<ul>
<li>方法： method</li>
<li>函数： function</li>
<li>在类里一般叫做函数，单独的叫做方法</li>
</ul>
</li>
<li>
<p>声明周期：事物从诞生到消亡的整个过程</p>
<ul>
<li>Vue的生命周期：通过源码可知，Vue在整个创建到销毁的过程中有很多复杂的操作，Vue会自动调用实例内部添加的函数，是通过Vue的 callHook( ) 函数调用的(钩子函数)
<ul>
<li>一般常用的 created:	mounted：</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[01.Vue的MVVM]]></title>
        <id>https://smilessneko.github.io/bkJin/post/01vue-de-mvvm/</id>
        <link href="https://smilessneko.github.io/bkJin/post/01vue-de-mvvm/">
        </link>
        <updated>2021-05-12T13:26:39.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="C:%5CUsers%5Cqq354%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210322134948095.png" alt="image-20210322134948095" loading="lazy"></figure>
<p>看代码的情况就是这样:</p>
<figure data-type="image" tabindex="2"><img src="C:%5CUsers%5Cqq354%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210322135818281.png" alt="image-20210322135818281" loading="lazy"></figure>
]]></content>
    </entry>
</feed>